{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\joshb\\\\desktop\\\\lambdaProjects\\\\front-end\\\\potluck\\\\src\\\\Components\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport * as yup from \"yup\"; // username\n// password\n// submit button\n// nice to have -- form validation and error handling messages\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst loginSchema = yup.object().shape({\n  username: yup.string().trim().required(\"Username is required\").min(3, \"Username must be at least 3 characters long\"),\n  password: yup.string().trim().required(\"Must enter your password\")\n});\n\nfunction Login(props) {\n  _s();\n\n  const [userData, setUserData] = useState({\n    username: \"\",\n    password: \"\"\n  });\n\n  const validate = (name, value) => {\n    reach(loginSchema, name).validate(value).then(() => setRegisterErr({ ...loginErr,\n      [name]: \"\"\n    })).catch(err => setLoginErr({ ...loginErr,\n      [name]: err.errors[0]\n    }));\n  };\n\n  const handleChange = evt => {\n    const target = evt.target;\n    const value = target.value;\n    const name = target.name;\n    validate(name, value);\n    setUserData({ ...userData,\n      [name]: value\n    });\n  };\n\n  console.log(userData); //   const handleSubmit = (evt) => {\n  //     evt.preventDefault();\n  //     const { username, first_name, last_name, password } = userData;\n  //     axios\n  //       .post(\n  //         url,\n  //         {\n  //           user: {\n  //             username: username,\n  //\n  //\n  //             password: password,\n  //           },\n  //         },\n  //         { withCredentials: true }\n  //       )\n  //       .then((resp) => {\n  //         return console.log(\"login response\", resp.data);\n  //       })\n  //       .catch((err) => {\n  //         console.log(\"login error\", err);\n  //       });\n  //   };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleChange,\n        value: userData.username,\n        placeholder: \"Username\",\n        name: \"username\",\n        type: \"text\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleChange,\n        value: userData.password,\n        placeholder: \"Password\",\n        name: \"password\",\n        type: \"password\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Login, \"S7Y1AuKJqrKTAEqhfKOLRrn1ADk=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/joshb/desktop/lambdaProjects/front-end/potluck/src/Components/Login.js"],"names":["React","useState","useEffect","yup","loginSchema","object","shape","username","string","trim","required","min","password","Login","props","userData","setUserData","validate","name","value","reach","then","setRegisterErr","loginErr","catch","err","setLoginErr","errors","handleChange","evt","target","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB,C,CAEA;AACA;AACA;AACA;;;AACA,MAAMC,WAAW,GAAGD,GAAG,CAACE,MAAJ,GAAaC,KAAb,CAAmB;AACrCC,EAAAA,QAAQ,EAAEJ,GAAG,CACVK,MADO,GAEPC,IAFO,GAGPC,QAHO,CAGE,sBAHF,EAIPC,GAJO,CAIH,CAJG,EAIA,6CAJA,CAD2B;AAMrCC,EAAAA,QAAQ,EAAET,GAAG,CAACK,MAAJ,GAAaC,IAAb,GAAoBC,QAApB,CAA6B,0BAA7B;AAN2B,CAAnB,CAApB;;AASA,SAASG,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACpB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC;AACvCM,IAAAA,QAAQ,EAAE,EAD6B;AAEvCK,IAAAA,QAAQ,EAAE;AAF6B,GAAD,CAAxC;;AAKA,QAAMK,QAAQ,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAChCC,IAAAA,KAAK,CAAChB,WAAD,EAAcc,IAAd,CAAL,CACGD,QADH,CACYE,KADZ,EAEGE,IAFH,CAEQ,MAAMC,cAAc,CAAC,EAAE,GAAGC,QAAL;AAAe,OAACL,IAAD,GAAQ;AAAvB,KAAD,CAF5B,EAGGM,KAHH,CAGUC,GAAD,IAASC,WAAW,CAAC,EAAE,GAAGH,QAAL;AAAe,OAACL,IAAD,GAAQO,GAAG,CAACE,MAAJ,CAAW,CAAX;AAAvB,KAAD,CAH7B;AAID,GALD;;AAOA,QAAMC,YAAY,GAAIC,GAAD,IAAS;AAC5B,UAAMC,MAAM,GAAGD,GAAG,CAACC,MAAnB;AACA,UAAMX,KAAK,GAAGW,MAAM,CAACX,KAArB;AACA,UAAMD,IAAI,GAAGY,MAAM,CAACZ,IAApB;AACAD,IAAAA,QAAQ,CAACC,IAAD,EAAOC,KAAP,CAAR;AACAH,IAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAe,OAACG,IAAD,GAAQC;AAAvB,KAAD,CAAX;AACD,GAND;;AAOAY,EAAAA,OAAO,CAACC,GAAR,CAAYjB,QAAZ,EApBoB,CAqBpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,sBACE;AAAA,2BACE;AAAA,8BACE;AACE,QAAA,QAAQ,EAAEa,YADZ;AAEE,QAAA,KAAK,EAAEb,QAAQ,CAACR,QAFlB;AAGE,QAAA,WAAW,EAAC,UAHd;AAIE,QAAA,IAAI,EAAC,UAJP;AAKE,QAAA,IAAI,EAAC,MALP;AAME,QAAA,QAAQ;AANV;AAAA;AAAA;AAAA;AAAA,cADF,eASE;AACE,QAAA,QAAQ,EAAEqB,YADZ;AAEE,QAAA,KAAK,EAAEb,QAAQ,CAACH,QAFlB;AAGE,QAAA,WAAW,EAAC,UAHd;AAIE,QAAA,IAAI,EAAC,UAJP;AAKE,QAAA,IAAI,EAAC,UALP;AAME,QAAA,QAAQ;AANV;AAAA;AAAA;AAAA;AAAA,cATF,eAkBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD;;GApEQC,K;;KAAAA,K;AAsET,eAAeA,KAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport * as yup from \"yup\";\n\n// username\n// password\n// submit button\n// nice to have -- form validation and error handling messages\nconst loginSchema = yup.object().shape({\n  username: yup\n    .string()\n    .trim()\n    .required(\"Username is required\")\n    .min(3, \"Username must be at least 3 characters long\"),\n  password: yup.string().trim().required(\"Must enter your password\"),\n});\n\nfunction Login(props) {\n  const [userData, setUserData] = useState({\n    username: \"\",\n    password: \"\",\n  });\n\n  const validate = (name, value) => {\n    reach(loginSchema, name)\n      .validate(value)\n      .then(() => setRegisterErr({ ...loginErr, [name]: \"\" }))\n      .catch((err) => setLoginErr({ ...loginErr, [name]: err.errors[0] }));\n  };\n\n  const handleChange = (evt) => {\n    const target = evt.target;\n    const value = target.value;\n    const name = target.name;\n    validate(name, value);\n    setUserData({ ...userData, [name]: value });\n  };\n  console.log(userData);\n  //   const handleSubmit = (evt) => {\n  //     evt.preventDefault();\n  //     const { username, first_name, last_name, password } = userData;\n  //     axios\n  //       .post(\n  //         url,\n  //         {\n  //           user: {\n  //             username: username,\n  //\n  //\n  //             password: password,\n  //           },\n  //         },\n  //         { withCredentials: true }\n  //       )\n  //       .then((resp) => {\n  //         return console.log(\"login response\", resp.data);\n  //       })\n  //       .catch((err) => {\n  //         console.log(\"login error\", err);\n  //       });\n  //   };\n  return (\n    <form>\n      <div>\n        <input\n          onChange={handleChange}\n          value={userData.username}\n          placeholder=\"Username\"\n          name=\"username\"\n          type=\"text\"\n          required\n        ></input>\n        <input\n          onChange={handleChange}\n          value={userData.password}\n          placeholder=\"Password\"\n          name=\"password\"\n          type=\"password\"\n          required\n        ></input>\n\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n}\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}